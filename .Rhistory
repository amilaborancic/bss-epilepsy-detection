train_data <- data.frame()
while(TRUE){
if(f){
merge(train_data, data.frame(seizure_data[i+1:i+23,]))
merge(train_data, list(no_seizure_data[i+1:i+23,]))
}
f <- !f
i <- i + 23
if(i >= nrow(seizure_data) | i >= nrow(no_seizure_data)) break
}
i <- 0
f <- FALSE
train_data <- data.frame()
while(TRUE){
if(f){
merge(train_data, data.frame(seizure_data[i+1:i+23,]))
}
else{
merge(train_data, list(no_seizure_data[i+1:i+23,]))
}
f <- !f
i <- i + 23
if(i >= nrow(seizure_data) | i >= nrow(no_seizure_data)) break
}
i <- 0
f <- FALSE
train_data <- data.frame()
while(TRUE){
if(f){
merge(train_data, seizure_data[i+1:i+23,])
}
else{
merge(train_data, list(no_seizure_data[i+1:i+23,]))
}
f <- !f
i <- i + 23
if(i >= nrow(seizure_data) | i >= nrow(no_seizure_data)) break
}
i <- 0
f <- FALSE
train_data <- data.frame()
while(TRUE){
if(f){
rbind(train_data, as.data.frame(seizure_data[i+1:i+23,]))
}
else{
rbind(train_data, as.data.frame(no_seizure_data[i+1:i+23,]))
}
f <- !f
i <- i + 23
if(i >= nrow(seizure_data) | i >= nrow(no_seizure_data)) break
}
setwd("C://Users/USER/Desktop/bss-epilepsy-detection")
library(e1071)
no_seizure_data <- read.csv("EpilepticSeizureRecognitionREDUCED.csv", header=T)
seizure_data <- read.csv("EpilepticSeizureRecognitionREDUCED_2.csv", header=T)
#plotanje date
plotdata <- seizure_data[24:46,]
plotdata <- plotdata[, -ncol(plotdata)]
plotdata <- plotdata[, -1]
plotdata <- as.numeric(unlist(plotdata))
plot(1:length(plotdata), plotdata, type="l")
#izvadimo svakog drugog ispitanika iz prvog i drugog seta da napravimo trening set
i <- 0
f <- FALSE
train_data <- data.frame()
while(TRUE){
if(f){
rbind(train_data, as.data.frame(seizure_data[i+1:i+23,]))
}
else{
rbind(train_data, as.data.frame(no_seizure_data[i+1:i+23,]))
}
f <- !f
i <- i + 23
if(i >= nrow(seizure_data) | i >= nrow(no_seizure_data)) break
}
i <- 0
f <- FALSE
train_data <- data.frame()
while(TRUE){
if(f){
rbind(train_data, as.data.frame(seizure_data[i+1:i+23,]))
print(i)
}
else{
rbind(train_data, as.data.frame(no_seizure_data[i+1:i+23,]))
}
f <- !f
i <- i + 23
if(i >= nrow(seizure_data) | i >= nrow(no_seizure_data)) break
}
i <- 0
f <- FALSE
train_data <- data.frame()
while(TRUE){
if(f){
rbind(train_data, as.data.frame(seizure_data[i+1:i+23,]))
print(seizure_data[i, ])
print(i)
}
else{
rbind(train_data, as.data.frame(no_seizure_data[i+1:i+23,]))
}
f <- !f
i <- i + 23
if(i >= nrow(seizure_data) | i >= nrow(no_seizure_data)) break
}
train_data
b<- data.frame()
b
rbind(a, b)
d <- rbind(a, b)
d <- rbind(d, d)
d
i <- 0
f <- FALSE
train_data <- data.frame()
while(TRUE){
if(f){
rbind(train_data, seizure_data[i+1:i+23,])
}
else{
rbind(train_data,bno_seizure_data[i+1:i+23,])
}
f <- !f
i <- i + 23
if(i >= nrow(seizure_data) | i >= nrow(no_seizure_data)) break
}
i <- 0
f <- FALSE
train_data <- data.frame()
while(TRUE){
if(f){
rbind(train_data, seizure_data[i+1:i+23,])
}
else{
rbind(train_data,no_seizure_data[i+1:i+23,])
}
f <- !f
i <- i + 23
if(i >= nrow(seizure_data) | i >= nrow(no_seizure_data)) break
}
train_data
warning()
warnings()
i <- 0
f <- FALSE
train_data <- data.frame()
while(i < nrow(seizure_data) && i < nrow(no_seizure_data)){
if(f){
rbind(train_data, seizure_data[i+1:i+23,])
}
else{
rbind(train_data, no_seizure_data[i+1:i+23,])
}
f <- !f
i <- i + 23
}
i <- 0
f <- FALSE
train_data <- data.frame()
test_data <- data.frame()
while(i < nrow(seizure_data) && i < nrow(no_seizure_data)){
if(f){
rbind(train_data, seizure_data[i+1:i+23,])
rbind(test_data, no_seizure_data[i+1:i+23, ])
}
else{
rbind(train_data, no_seizure_data[i+1:i+23,])
rbind(test_data, seizure_data[i+1, i+23])
}
f <- !f
i <- i + 23
}
i <- 0
f <- FALSE
train_data <- data.frame()
test_data <- data.frame()
while(i < nrow(seizure_data) && i < nrow(no_seizure_data)){
dummy <- data.frame(seizure_data[i+1:i+23,])
dummy_2 <- data.frame(no_seizure_data[i+1:i+23,])
if(f){
rbind(train_data, dummy)
rbind(test_data, dummy_2)
}
else{
rbind(train_data, dummy_2)
rbind(test_data, dummy)
}
f <- !f
i <- i + 23
}
i <- 0
f <- FALSE
train_data <- data.frame()
test_data <- data.frame()
while(i < nrow(seizure_data) && i < nrow(no_seizure_data)){
dummy <- data.frame(seizure_data[i+1:i+23,])
dummy
dummy_2 <- data.frame(no_seizure_data[i+1:i+23,])
if(f){
rbind(train_data, dummy)
rbind(test_data, dummy_2)
}
else{
rbind(train_data, dummy_2)
rbind(test_data, dummy)
}
f <- !f
i <- i + 23
}
i <- 0
f <- FALSE
train_data <- data.frame()
test_data <- data.frame()
while(i < nrow(seizure_data) && i < nrow(no_seizure_data)){
dummy <- data.frame(seizure_data[i+1:i+23,])
print(dummy)
dummy_2 <- data.frame(no_seizure_data[i+1:i+23,])
if(f){
rbind(train_data, dummy)
rbind(test_data, dummy_2)
}
else{
rbind(train_data, dummy_2)
rbind(test_data, dummy)
}
f <- !f
i <- i + 23
}
i <- 0
f <- FALSE
train_data <- data.frame()
test_data <- data.frame()
while(i < nrow(seizure_data) && i < nrow(no_seizure_data)){
dummy <- data.frame(seizure_data[i+1:i+23,])
dummy_2 <- data.frame(no_seizure_data[i+1:i+23,])
if(f){
train_data <- rbind(train_data, dummy)
test_data <- rbind(test_data, dummy_2)
}
else{
rbind(train_data, dummy_2)
rbind(test_data, dummy)
}
f <- !f
i <- i + 23
}
i <- 0
f <- FALSE
train_data <- data.frame()
test_data <- data.frame()
while(i < nrow(seizure_data) && i < nrow(no_seizure_data)){
dummy <- data.frame(seizure_data[i+1:i+23,])
dummy_2 <- data.frame(no_seizure_data[i+1:i+23,])
if(f){
train_data <- rbind(train_data, dummy)
test_data <- rbind(test_data, dummy_2)
}
else{
train_data <- rbind(train_data, dummy_2)
test_data <- rbind(test_data, dummy)
}
f <- !f
i <- i + 23
}
View(test_data)
View(test_data)
na.omit(train_data)
na.omit(test_data)
train_data <- na.omit(train_data)
test_data <- na.omit(test_data)
View(test_data)
View(test_data)
View(train_data)
View(train_data)
data.frame(no_seizure_data[1:5,])
data.frame(no_seizure_data[1:5,1:5])
nrow(nm_train)
library(e1071)
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
no_seizure_data <- read.csv("EpilepticSeizureRecognitionREDUCED.csv", header=T)
seizure_data <- read.csv("EpilepticSeizureRecognitionREDUCED_2.csv", header=T)
#plotanje date
plotdata <- seizure_data[24:46,]
plotdata <- plotdata[, -ncol(plotdata)]
plotdata <- plotdata[, -1]
plotdata <- as.numeric(unlist(plotdata))
plot(1:length(plotdata), plotdata, type="l")
#izvadimo svakog drugog ispitanika iz prvog i drugog seta da napravimo trening set
i <- 0
f <- FALSE
train_data <- data.frame()
test_data <- data.frame()
while(i < nrow(seizure_data) && i < nrow(no_seizure_data)){
dummy <- data.frame(seizure_data[i+1:i+23,])
dummy_2 <- data.frame(no_seizure_data[i+1:i+23,])
####ovo iz nekog razloga poremeti dataset - bude ukupno 50 kolona umjesto 179
if(f){
train_data <- rbind(train_data, dummy)
test_data <- rbind(test_data, dummy_2)
}
else{
train_data <- rbind(train_data, dummy_2)
test_data <- rbind(test_data, dummy)
}
f <- !f
i <- i + 23
}
train_data <- na.omit(train_data)
test_data <- na.omit(test_data)
#normalizacija
nm_train <- normalize(train_data[,!colnames(train_data) %in% c("key","Klasa")])
nm_test <- normalize(test_data[,!colnames(test_data) %in% c("key","Klasa")])
nm_train$Klasa<-train_data[,c("Klasa")]
nm_test$Klasa <- test_data[,c("Klasa")]
nrow(nm_train)
nrow
nrow(train_data)
tune.out <- tune(svm,Klasa~.,data=nm_train[1:46,c("X1","X2","Klasa")], kernel ="linear", ranges=list(cost=c(0.01,0.1,1,10)))
tune.out
predict(tune.out,nm_test)
predict(tune.out$best.model,nm_test)
plot(tune.out,nm_train)
svm_model <- tune.out$best.model
svm_predict <- predict(svm_model, svm_test)
svm_model <- tune.out$best.model
svm_predict <- predict(svm_model, nm_test)
confusionMatrix(svm_predict,nm_test$Attrition)
confusionMatrix(svm_predict,nm_test$Klasa)
library(caret)
confusionMatrix(svm_predict,nm_test$Klasa)
levels(svm_predict$Klasa)
svm_predict
confusionMatrix(table(svm_predict,nm_test$Klasa))
confusionMatrix(table(svm_predict,nm_test))
confusionMatrix(table(svm_model,nm_test))
confusionMatrix(table(svm_predict,nm_test$Klasa))
nm_test<-nm_test[1:46,c("X1","X2","Klasa")]
confusionMatrix(table(svm_predict,nm_test$Klasa))
nm_test
nm_train
data
predict()
svm_predict
table(svm_predict,nm_test$Klasa)
nm_test<-nm_train[1:46,c("X1","X2","Klasa")
]
confusionMatrix(svm_predict,nm_test$Klasa)
nm_test
svm_predict<-predict(svm_model,nm_test)
confusionMatrix(svm_predict,nm_test$Klasa)
confusionMatrix(table(svm_predict,nm_test$Klasa)()
)
confusionMatrix(table(svm_predict,nm_test$Klasa))
nm_tnm_test
svm_model <- tune.out$best.model
svm_predict <- predict(svm_model, nm_test)
svm_table <- confusionMatrix(svm_predict, nm_test$Klasa)
library(e1071)
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
no_seizure_data <- read.csv("EpilepticSeizureRecognitionREDUCED.csv", header=T)
seizure_data <- read.csv("EpilepticSeizureRecognitionREDUCED_2.csv", header=T)
#plotanje date
plotdata <- seizure_data[24:46,]
plotdata <- plotdata[, -ncol(plotdata)]
plotdata <- plotdata[, -1]
plotdata <- as.numeric(unlist(plotdata))
plot(1:length(plotdata), plotdata, type="l")
#izvadimo svakog drugog ispitanika iz prvog i drugog seta da napravimo trening set
i <- 0
f <- FALSE
train_data <- data.frame()
test_data <- data.frame()
while(i < nrow(seizure_data) && i < nrow(no_seizure_data)){
dummy <- data.frame(seizure_data[i+1:i+23,])
dummy_2 <- data.frame(no_seizure_data[i+1:i+23,])
####ovo iz nekog razloga poremeti dataset - bude ukupno 50 kolona umjesto 179
if(f){
train_data <- rbind(train_data, dummy)
test_data <- rbind(test_data, dummy_2)
}
else{
train_data <- rbind(train_data, dummy_2)
test_data <- rbind(test_data, dummy)
}
f <- !f
i <- i + 23
}
train_data <- na.omit(train_data)
test_data <- na.omit(test_data)
#normalizacija
nm_train <- normalize(train_data[,!colnames(train_data) %in% c("key","Klasa")])
nm_test <- normalize(test_data[,!colnames(test_data) %in% c("key","Klasa")])
nm_train$Klasa<-train_data[,c("Klasa")]
nm_test$Klasa <- test_data[,c("Klasa")]
tune.out <- tune(svm,Klasa~.,data=nm_train[1:46,c("X1","X2","Klasa")], kernel ="linear", ranges=list(cost=c(0.01,0.1,1,10)))
svm_model <- tune.out$best.model
nm_test=nm_train[1:46,c("X1","X2","Klasa")]
svm_predict <- predict(svm_model, nm_test)
svm_table <- confusionMatrix(svm_predict, nm_test$Klasa)
svm_table <- confusionMatrix(table(svm_predict, nm_test$Klasa))
nm_test
svm_table <- confusionMatrix(table(svm_predict, nm_test$Klasa))
svm_predict
levels(nm_test$Klasa)
levels(nm_train$Klasa)
levels(train_data$Klasa)
levels(dummy$Klasa)
library(e1071)
#ucitavanje dataseta
data_original <- read.csv("EpilepticSeizureRecognitionORIGINAL.csv", header=T)
#izdvojimo 100 od 500 ispitanika
data_reduced <- data_original[1:2300, ]
data_reduced_2 <- data_original[4601:6900, ]
#sredimo nazive kolona radi lakseg snalazenja
names(data_reduced)[names(data_reduced) == "y"] <- "Klasa"
data_reduced <- data_reduced[,-1]
data_reduced$Klasa<-0
data_reduced["Klasa"] <- lapply(data_reduced["Klasa"], as.factor)
#sredimo nazive kolona radi lakseg snalazenja za drugi set
names(data_reduced_2)[names(data_reduced_2) == "y"] <- "Klasa"
data_reduced_2 <- data_reduced_2[,-1]
data_reduced_2$Klasa<-1
data_reduced_2["Klasa"] <- lapply(data_reduced_2["Klasa"], as.factor)
#spasimo nove datasetove
write.csv(data_reduced,'EpilepticSeizureRecognitionREDUCED.csv')
write.csv(data_reduced_2,'EpilepticSeizureRecognitionREDUCED_2.csv')
data_reduced$Klasa
library(e1071)
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
no_seizure_data <- read.csv("EpilepticSeizureRecognitionREDUCED.csv", header=T)
seizure_data <- read.csv("EpilepticSeizureRecognitionREDUCED_2.csv", header=T)
#plotanje date
plotdata <- seizure_data[24:46,]
plotdata <- plotdata[, -ncol(plotdata)]
plotdata <- plotdata[, -1]
plotdata <- as.numeric(unlist(plotdata))
plot(1:length(plotdata), plotdata, type="l")
#izvadimo svakog drugog ispitanika iz prvog i drugog seta da napravimo trening set
i <- 0
f <- FALSE
train_data <- data.frame()
test_data <- data.frame()
while(i < nrow(seizure_data) && i < nrow(no_seizure_data)){
dummy <- data.frame(seizure_data[i+1:i+23,])
dummy_2 <- data.frame(no_seizure_data[i+1:i+23,])
####ovo iz nekog razloga poremeti dataset - bude ukupno 50 kolona umjesto 179
if(f){
train_data <- rbind(train_data, dummy)
test_data <- rbind(test_data, dummy_2)
}
else{
train_data <- rbind(train_data, dummy_2)
test_data <- rbind(test_data, dummy)
}
f <- !f
i <- i + 23
}
train_data <- na.omit(train_data)
test_data <- na.omit(test_data)
train_data$Klasa
levels(train_data$KlasaX)
levels(train_data$Klasa)
levels(seizure_data$Klasa)
levels(no_seizure_data$Klasa)
levels(data_reduced$Klasa)
train_data["Klasa"] <- lapply(train_data["Klasa"], as.factor)
test_data["Klasa"] <- lapply(test_data["Klasa"], as.factor)
#normalizacija
nm_train <- normalize(train_data[,!colnames(train_data) %in% c("key","Klasa")])
nm_test <- normalize(test_data[,!colnames(test_data) %in% c("key","Klasa")])
nm_train$Klasa<-train_data[,c("Klasa")]
nm_test$Klasa <- test_data[,c("Klasa")]
nm_train$Klasa
levels(nm_train$Klasa)
tune.out <- tune(svm,Klasa~.,data=nm_train[1:46,c("X1","X2","Klasa")], kernel ="linear", ranges=list(cost=c(0.01,0.1,1,10)))
svm_model <- tune.out$best.model
nm_test=nm_train[1:46,c("X1","X2","Klasa")]
svm_predict <- predict(svm_model, nm_test)
svm_table <- confusionMatrix(svm_predict, nm_test$Klasa)
svm_table
tune.out <- tune(svm,Klasa~.,data=nm_train[1:46,c("X2","X4","Klasa")], kernel ="linear", ranges=list(cost=c(0.01,0.1,1,10)))
svm_model <- tune.out$best.model
nm_test=nm_train[1:46,c("X2","X4","Klasa")]
svm_predict <- predict(svm_model, nm_test)
svm_table <- confusionMatrix(svm_predict, nm_test$Klasa)
svm_table
tune.out <- tune(svm,Klasa~.,data=nm_train[1:79,c("X2","X4","Klasa")], kernel ="linear", ranges=list(cost=c(0.01,0.1,1,10)))
svm_model <- tune.out$best.model
nm_test=nm_train[1:46,c("X2","X4","Klasa")]
svm_predict <- predict(svm_model, nm_test)
svm_table <- confusionMatrix(svm_predict, nm_test$Klasa)
svm_table
tune.out <- tune(svm,Klasa~.,data=nm_train[1:102,c("X2","X4","Klasa")], kernel ="linear", ranges=list(cost=c(0.01,0.1,1,10)))
svm_model <- tune.out$best.model
nm_test=nm_train[1:46,c("X2","X4","Klasa")]
svm_predict <- predict(svm_model, nm_test)
svm_table <- confusionMatrix(svm_predict, nm_test$Klasa)
svm_table
nm_test=nm_train[1:1000,c("X2","X4","Klasa")]
svm_predict <- predict(svm_model, nm_test)
svm_table <- confusionMatrix(svm_predict, nm_test$Klasa)
svm_table
train_data
