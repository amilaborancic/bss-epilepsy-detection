f <- FALSE
train_data <- data.frame()
test_data <- data.frame()
while(i < nrow(seizure_data) && i < nrow(no_seizure_data)){
dummy <- data.frame(seizure_data[i+1:i+23,])
dummy_2 <- data.frame(no_seizure_data[i+1:i+23,])
####ovo iz nekog razloga poremeti dataset - bude ukupno 50 kolona umjesto 179
if(f){
train_data <- rbind(train_data, dummy)
test_data <- rbind(test_data, dummy_2)
}
else{
train_data <- rbind(train_data, dummy_2)
test_data <- rbind(test_data, dummy)
}
f <- !f
i <- i + 23
}
train_data <- na.omit(train_data)
test_data <- na.omit(test_data)
#normalizacija
nm_train <- normalize(train_data[,!colnames(train_data) %in% c("key","Klasa")])
nm_test <- normalize(test_data[,!colnames(test_data) %in% c("key","Klasa")])
nm_train$Klasa<-train_data[,c("Klasa")]
nm_test$Klasa <- test_data[,c("Klasa")]
nrow(nm_train)
nrow
nrow(train_data)
tune.out <- tune(svm,Klasa~.,data=nm_train[1:46,c("X1","X2","Klasa")], kernel ="linear", ranges=list(cost=c(0.01,0.1,1,10)))
tune.out
predict(tune.out,nm_test)
predict(tune.out$best.model,nm_test)
plot(tune.out,nm_train)
svm_model <- tune.out$best.model
svm_predict <- predict(svm_model, svm_test)
svm_model <- tune.out$best.model
svm_predict <- predict(svm_model, nm_test)
confusionMatrix(svm_predict,nm_test$Attrition)
confusionMatrix(svm_predict,nm_test$Klasa)
library(caret)
confusionMatrix(svm_predict,nm_test$Klasa)
levels(svm_predict$Klasa)
svm_predict
confusionMatrix(table(svm_predict,nm_test$Klasa))
confusionMatrix(table(svm_predict,nm_test))
confusionMatrix(table(svm_model,nm_test))
confusionMatrix(table(svm_predict,nm_test$Klasa))
nm_test<-nm_test[1:46,c("X1","X2","Klasa")]
confusionMatrix(table(svm_predict,nm_test$Klasa))
nm_test
nm_train
data
predict()
svm_predict
table(svm_predict,nm_test$Klasa)
nm_test<-nm_train[1:46,c("X1","X2","Klasa")
]
confusionMatrix(svm_predict,nm_test$Klasa)
nm_test
svm_predict<-predict(svm_model,nm_test)
confusionMatrix(svm_predict,nm_test$Klasa)
confusionMatrix(table(svm_predict,nm_test$Klasa)()
)
confusionMatrix(table(svm_predict,nm_test$Klasa))
nm_tnm_test
svm_model <- tune.out$best.model
svm_predict <- predict(svm_model, nm_test)
svm_table <- confusionMatrix(svm_predict, nm_test$Klasa)
library(e1071)
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
no_seizure_data <- read.csv("EpilepticSeizureRecognitionREDUCED.csv", header=T)
seizure_data <- read.csv("EpilepticSeizureRecognitionREDUCED_2.csv", header=T)
#plotanje date
plotdata <- seizure_data[24:46,]
plotdata <- plotdata[, -ncol(plotdata)]
plotdata <- plotdata[, -1]
plotdata <- as.numeric(unlist(plotdata))
plot(1:length(plotdata), plotdata, type="l")
#izvadimo svakog drugog ispitanika iz prvog i drugog seta da napravimo trening set
i <- 0
f <- FALSE
train_data <- data.frame()
test_data <- data.frame()
while(i < nrow(seizure_data) && i < nrow(no_seizure_data)){
dummy <- data.frame(seizure_data[i+1:i+23,])
dummy_2 <- data.frame(no_seizure_data[i+1:i+23,])
####ovo iz nekog razloga poremeti dataset - bude ukupno 50 kolona umjesto 179
if(f){
train_data <- rbind(train_data, dummy)
test_data <- rbind(test_data, dummy_2)
}
else{
train_data <- rbind(train_data, dummy_2)
test_data <- rbind(test_data, dummy)
}
f <- !f
i <- i + 23
}
train_data <- na.omit(train_data)
test_data <- na.omit(test_data)
#normalizacija
nm_train <- normalize(train_data[,!colnames(train_data) %in% c("key","Klasa")])
nm_test <- normalize(test_data[,!colnames(test_data) %in% c("key","Klasa")])
nm_train$Klasa<-train_data[,c("Klasa")]
nm_test$Klasa <- test_data[,c("Klasa")]
tune.out <- tune(svm,Klasa~.,data=nm_train[1:46,c("X1","X2","Klasa")], kernel ="linear", ranges=list(cost=c(0.01,0.1,1,10)))
svm_model <- tune.out$best.model
nm_test=nm_train[1:46,c("X1","X2","Klasa")]
svm_predict <- predict(svm_model, nm_test)
svm_table <- confusionMatrix(svm_predict, nm_test$Klasa)
svm_table <- confusionMatrix(table(svm_predict, nm_test$Klasa))
nm_test
svm_table <- confusionMatrix(table(svm_predict, nm_test$Klasa))
svm_predict
levels(nm_test$Klasa)
levels(nm_train$Klasa)
levels(train_data$Klasa)
levels(dummy$Klasa)
library(e1071)
#ucitavanje dataseta
data_original <- read.csv("EpilepticSeizureRecognitionORIGINAL.csv", header=T)
#izdvojimo 100 od 500 ispitanika
data_reduced <- data_original[1:2300, ]
data_reduced_2 <- data_original[4601:6900, ]
#sredimo nazive kolona radi lakseg snalazenja
names(data_reduced)[names(data_reduced) == "y"] <- "Klasa"
data_reduced <- data_reduced[,-1]
data_reduced$Klasa<-0
data_reduced["Klasa"] <- lapply(data_reduced["Klasa"], as.factor)
#sredimo nazive kolona radi lakseg snalazenja za drugi set
names(data_reduced_2)[names(data_reduced_2) == "y"] <- "Klasa"
data_reduced_2 <- data_reduced_2[,-1]
data_reduced_2$Klasa<-1
data_reduced_2["Klasa"] <- lapply(data_reduced_2["Klasa"], as.factor)
#spasimo nove datasetove
write.csv(data_reduced,'EpilepticSeizureRecognitionREDUCED.csv')
write.csv(data_reduced_2,'EpilepticSeizureRecognitionREDUCED_2.csv')
data_reduced$Klasa
library(e1071)
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
no_seizure_data <- read.csv("EpilepticSeizureRecognitionREDUCED.csv", header=T)
seizure_data <- read.csv("EpilepticSeizureRecognitionREDUCED_2.csv", header=T)
#plotanje date
plotdata <- seizure_data[24:46,]
plotdata <- plotdata[, -ncol(plotdata)]
plotdata <- plotdata[, -1]
plotdata <- as.numeric(unlist(plotdata))
plot(1:length(plotdata), plotdata, type="l")
#izvadimo svakog drugog ispitanika iz prvog i drugog seta da napravimo trening set
i <- 0
f <- FALSE
train_data <- data.frame()
test_data <- data.frame()
while(i < nrow(seizure_data) && i < nrow(no_seizure_data)){
dummy <- data.frame(seizure_data[i+1:i+23,])
dummy_2 <- data.frame(no_seizure_data[i+1:i+23,])
####ovo iz nekog razloga poremeti dataset - bude ukupno 50 kolona umjesto 179
if(f){
train_data <- rbind(train_data, dummy)
test_data <- rbind(test_data, dummy_2)
}
else{
train_data <- rbind(train_data, dummy_2)
test_data <- rbind(test_data, dummy)
}
f <- !f
i <- i + 23
}
train_data <- na.omit(train_data)
test_data <- na.omit(test_data)
train_data$Klasa
levels(train_data$KlasaX)
levels(train_data$Klasa)
levels(seizure_data$Klasa)
levels(no_seizure_data$Klasa)
levels(data_reduced$Klasa)
train_data["Klasa"] <- lapply(train_data["Klasa"], as.factor)
test_data["Klasa"] <- lapply(test_data["Klasa"], as.factor)
#normalizacija
nm_train <- normalize(train_data[,!colnames(train_data) %in% c("key","Klasa")])
nm_test <- normalize(test_data[,!colnames(test_data) %in% c("key","Klasa")])
nm_train$Klasa<-train_data[,c("Klasa")]
nm_test$Klasa <- test_data[,c("Klasa")]
nm_train$Klasa
levels(nm_train$Klasa)
tune.out <- tune(svm,Klasa~.,data=nm_train[1:46,c("X1","X2","Klasa")], kernel ="linear", ranges=list(cost=c(0.01,0.1,1,10)))
svm_model <- tune.out$best.model
nm_test=nm_train[1:46,c("X1","X2","Klasa")]
svm_predict <- predict(svm_model, nm_test)
svm_table <- confusionMatrix(svm_predict, nm_test$Klasa)
svm_table
tune.out <- tune(svm,Klasa~.,data=nm_train[1:46,c("X2","X4","Klasa")], kernel ="linear", ranges=list(cost=c(0.01,0.1,1,10)))
svm_model <- tune.out$best.model
nm_test=nm_train[1:46,c("X2","X4","Klasa")]
svm_predict <- predict(svm_model, nm_test)
svm_table <- confusionMatrix(svm_predict, nm_test$Klasa)
svm_table
tune.out <- tune(svm,Klasa~.,data=nm_train[1:79,c("X2","X4","Klasa")], kernel ="linear", ranges=list(cost=c(0.01,0.1,1,10)))
svm_model <- tune.out$best.model
nm_test=nm_train[1:46,c("X2","X4","Klasa")]
svm_predict <- predict(svm_model, nm_test)
svm_table <- confusionMatrix(svm_predict, nm_test$Klasa)
svm_table
tune.out <- tune(svm,Klasa~.,data=nm_train[1:102,c("X2","X4","Klasa")], kernel ="linear", ranges=list(cost=c(0.01,0.1,1,10)))
svm_model <- tune.out$best.model
nm_test=nm_train[1:46,c("X2","X4","Klasa")]
svm_predict <- predict(svm_model, nm_test)
svm_table <- confusionMatrix(svm_predict, nm_test$Klasa)
svm_table
nm_test=nm_train[1:1000,c("X2","X4","Klasa")]
svm_predict <- predict(svm_model, nm_test)
svm_table <- confusionMatrix(svm_predict, nm_test$Klasa)
svm_table
train_data
if(rb>100 || rb<0){
print("Broj koji ste unijeli nije u opsegu od 1 do 100.");
}
user_input<-function(){
rb <- readline(prompt="Unesite redni broj pacijenta (od 1 do 100): ");
rb<-as.numeric(rb)
if(rb>100 || rb<0){
print("Broj koji ste unijeli nije u opsegu od 1 do 100.");
}
else{
epilepsy_detection(rb);
}
}
epilepsy_detection<-function(rb){
tune.out <- tune(svm,Klasa~.,data=nm_train, kernel ="linear", ranges=list(cost=c(0.01,0.1,1,10)))
svm_model <- tune.out$best.model
svm_predict <- predict(svm_model, nm_test)
svm_model <- tune.out$best.model
svm_predict<-as.data.frame(svm_predict)
i<-23*(rb-1)+1
ima<-0
nema<-0
k<-1
while(k<=23){
if(svm_predict[i,1]==0){
nema<-nema+1
}else{
ima<-ima+1;
}
i<-i+1;
k<-k+1;
}
if(ima>nema){
print("Pacijent ima epilepsiju.")
}else if(ima<nema){
print("Pacijent nema epilepsiju.")
}else{
print("Nije moguæe pouzdano utvrditi da li pacijent ima epilepsiju ili ne.")
}
}
user_input<-function(){
rb <- readline(prompt="Unesite redni broj pacijenta (od 1 do 100): ");
rb<-as.numeric(rb)
if(rb>100 || rb<0){
print("Broj koji ste unijeli nije u opsegu od 1 do 100.");
}
else{
epilepsy_detection(rb);
}
}
epilepsy_detection<-function(rb){
tune.out <- tune(svm,Klasa~.,data=nm_train, kernel ="linear", ranges=list(cost=c(0.01,0.1,1,10)))
svm_model <- tune.out$best.model
svm_predict <- predict(svm_model, nm_test)
svm_model <- tune.out$best.model
svm_predict<-as.data.frame(svm_predict)
i<-23*(rb-1)+1
ima<-0
nema<-0
k<-1
while(k<=23){
if(svm_predict[i,1]==0){
nema<-nema+1
}else{
ima<-ima+1;
}
i<-i+1;
k<-k+1;
}
if(ima>nema){
print("Pacijent ima epilepsiju.")
}else if(ima<nema){
print("Pacijent nema epilepsiju.")
}else{
print("Nije moguæe pouzdano utvrditi da li pacijent ima epilepsiju ili ne.")
}
}
user_input()
? svm.tune
??svm.tune
?tune
library(arules)
setwd("C://Users/USER/Desktop/bss-epilepsy-detection")
library(e1071)
library(caret)
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
no_seizure_data <- read.csv("EpilepticSeizureRecognitionREDUCED.csv", header=T)
seizure_data <- read.csv("EpilepticSeizureRecognitionREDUCED_2.csv", header=T)
#plotanje date
plotdata <- seizure_data[24:46,]
plotdata <- plotdata[, -ncol(plotdata)]
plotdata <- plotdata[, -1]
plotdata <- as.numeric(unlist(plotdata))
plot(1:length(plotdata), plotdata, type="l")
#izvadimo svakog drugog ispitanika iz prvog i drugog seta da napravimo trening set
i <- 0
f <- FALSE
train_data <- data.frame()
test_data <- data.frame()
print(nrow(train_data))
while(i < (nrow(seizure_data)) && i < (nrow(no_seizure_data))){
dummy <- data.frame(seizure_data[(i+1):(i+23),])
dummy_2 <- data.frame(no_seizure_data[(i+1):(i+23),])
####ovo iz nekog razloga poremeti dataset - bude ukupno 50 kolona umjesto 179
if(f){
train_data <- rbind(train_data, dummy)
test_data <- rbind(test_data, dummy_2)
}
else{
train_data <- rbind(train_data, dummy_2)
test_data <- rbind(test_data, dummy)
}
i<-i+23
f <- !f
}
train_data["Klasa"] <- lapply(train_data["Klasa"], as.factor)
test_data["Klasa"] <- lapply(test_data["Klasa"], as.factor)
#normalizacija
nm_train <- normalize(train_data[,!colnames(train_data) %in% c("key","Klasa")])
nm_test <- normalize(test_data[,!colnames(test_data) %in% c("key","Klasa")])
nm_train$Klasa<-train_data[,c("Klasa")]
nm_test$Klasa <- test_data[,c("Klasa")]
user_input<-function(){
rb <- readline(prompt="Unesite redni broj pacijenta (od 1 do 100): ");
rb<-as.numeric(rb)
if(rb>100 || rb<0){
print("Broj koji ste unijeli nije u opsegu od 1 do 100.");
}
else{
epilepsy_detection(rb);
}
}
epilepsy_detection<-function(rb){
tune.out <- tune(svm,Klasa~.,data=nm_train, kernel ="linear", ranges=list(cost=c(0.01,0.1,1,10)))
svm_model <- tune.out$best.model
svm_predict <- predict(svm_model, nm_test)
svm_model <- tune.out$best.model
svm_predict<-as.data.frame(svm_predict)
i<-23*(rb-1)+1
ima<-0
nema<-0
k<-1
while(k<=23){
if(svm_predict[i,1]==0){
nema<-nema+1
}else{
ima<-ima+1;
}
i<-i+1;
k<-k+1;
}
if(ima>nema){
print("Pacijent ima epilepsiju.")
}else if(ima<nema){
print("Pacijent nema epilepsiju.")
}else{
print("Nije moguæe pouzdano utvrditi da li pacijent ima epilepsiju ili ne.")
}
}
user_input()
setwd("C://Users/USER/Desktop/bss-epilepsy-detection")
library(e1071)
library(caret)
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
no_seizure_data <- read.csv("EpilepticSeizureRecognitionREDUCED.csv", header=T)
seizure_data <- read.csv("EpilepticSeizureRecognitionREDUCED_2.csv", header=T)
#plotanje date
plotdata <- seizure_data[24:46,]
plotdata <- plotdata[, -ncol(plotdata)]
plotdata <- plotdata[, -1]
plotdata <- as.numeric(unlist(plotdata))
plot(1:length(plotdata), plotdata, type="l")
#izvadimo svakog drugog ispitanika iz prvog i drugog seta da napravimo trening set
i <- 0
f <- FALSE
train_data <- data.frame()
test_data <- data.frame()
print(nrow(train_data))
while(i < (nrow(seizure_data)) && i < (nrow(no_seizure_data))){
dummy <- data.frame(seizure_data[(i+1):(i+23),])
dummy_2 <- data.frame(no_seizure_data[(i+1):(i+23),])
if(f){
train_data <- rbind(train_data, dummy)
test_data <- rbind(test_data, dummy_2)
}
else{
train_data <- rbind(train_data, dummy_2)
test_data <- rbind(test_data, dummy)
}
i<-i+23
f <- !f
}
train_data["Klasa"] <- lapply(train_data["Klasa"], as.factor)
test_data["Klasa"] <- lapply(test_data["Klasa"], as.factor)
#normalizacija
nm_train <- normalize(train_data[,!colnames(train_data) %in% c("key","Klasa")])
nm_test <- normalize(test_data[,!colnames(test_data) %in% c("key","Klasa")])
nm_train$Klasa<-train_data[,c("Klasa")]
nm_test$Klasa <- test_data[,c("Klasa")]
#plotanje date
plotdata <- seizure_data[1:23,]
plotdata <- plotdata[, -ncol(plotdata)]
plotdata <- plotdata[, -1]
plotdata <- as.numeric(unlist(plotdata))
plot(1:length(plotdata), plotdata, type="l")
plotdata <- no_seizure_data[1:23,]
plotdata <- plotdata[, -ncol(plotdata)]
plotdata <- plotdata[, -1]
plotdata <- as.numeric(unlist(plotdata))
plot(1:length(plotdata), plotdata, type="l")
#plotanje date
plotdata <- no_seizure_data[23:46,]
plotdata <- plotdata[, -ncol(plotdata)]
plotdata <- plotdata[, -1]
plotdata <- as.numeric(unlist(plotdata))
plot(1:length(plotdata), plotdata, type="l")
#plotanje date
plotdata <- no_seizure_data[47:70,]
plotdata <- plotdata[, -ncol(plotdata)]
plotdata <- plotdata[, -1]
plotdata <- as.numeric(unlist(plotdata))
plot(1:length(plotdata), plotdata, type="l")
#plotanje date
plotdata <- no_seizure_data[71:94,]
plotdata <- plotdata[, -ncol(plotdata)]
plotdata <- plotdata[, -1]
plotdata <- as.numeric(unlist(plotdata))
plot(1:length(plotdata), plotdata, type="l")
<- read.csv("EpilepticSeizureRecognitionREDUCED_2.csv", header=T)
#plotanje date
plotdata <- normalize(no_seizure_data[71:94,])
plotdata <- plotdata[, -ncol(plotdata)]
plotdata <- plotdata[, -1]
plotdata <- as.numeric(unlist(plotdata))
plot(1:length(plotdata), plotdata, type="l")
#plotanje date
plotdata <- normalize(no_seizure_data[1:23,])
plotdata <- plotdata[, -ncol(plotdata)]
plotdata <- plotdata[, -1]
plotdata <- as.numeric(unlist(plotdata))
plot(1:length(plotdata), plotdata, type="l")
plotdata <- normalize(no_seizure_data[24:46,])
plotdata <- plotdata[, -ncol(plotdata)]
plotdata <- plotdata[, -1]
plotdata <- as.numeric(unlist(plotdata))
plot(1:length(plotdata), plotdata, type="l")
#plotanje date
plotdata <- normalize(seizure_data[24:46,])
plotdata <- plotdata[, -ncol(plotdata)]
plotdata <- plotdata[, -1]
plotdata <- as.numeric(unlist(plotdata))
plot(1:length(plotdata), plotdata, type="l")
user_input<-function(){
rb <- readline(prompt="Unesite redni broj pacijenta (od 1 do 100): ");
rb<-as.numeric(rb)
if(rb>100 || rb<0){
print("Broj koji ste unijeli nije u opsegu od 1 do 100.");
}
else{
epilepsy_detection(rb);
}
}
epilepsy_detection<-function(rb){
tune.out <- tune(svm,Klasa~.,data=nm_train, kernel ="linear", ranges=list(cost=c(0.01,0.1,1,10)))
svm_model <- tune.out$best.model
svm_predict <- predict(svm_model, nm_test)
svm_model <- tune.out$best.model
svm_predict<-as.data.frame(svm_predict)
i<-23*(rb-1)+1
ima<-0
nema<-0
k<-1
while(k<=23){
if(svm_predict[i,1]==0){
nema<-nema+1
}else{
ima<-ima+1;
}
i<-i+1;
k<-k+1;
}
if(ima>nema){
print("Pacijent ima epilepsiju.")
}else if(ima<nema){
print("Pacijent nema epilepsiju.")
}else{
print("Nije moguæe pouzdano utvrditi da li pacijent ima epilepsiju ili ne.")
}
}
user_input()
