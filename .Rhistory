life_plot <- list(data=tmp, cluster=life_clust$cluster)
fviz_cluster(life_plot)
life_o <- optics(tmp, eps = 3, minPts=20)
life_clust <- extractDBSCAN(life_o, 2.5)
life_plot <- list(data=tmp, cluster=life_clust$cluster)
fviz_cluster(life_plot)
life_o <- optics(tmp, eps = 2, minPts=5)
life_clust <- extractDBSCAN(life_o, 2)
life_plot <- list(data=tmp, cluster=life_clust$cluster)
fviz_cluster(life_plot)
life_o <- optics(tmp, eps = 2, minPts=5)
life_clust <- extractDBSCAN(life_o, 1)
life_plot <- list(data=tmp, cluster=life_clust$cluster)
fviz_cluster(life_plot)
life_o <- optics(tmp, eps = 2, minPts=10)
life_clust <- extractDBSCAN(life_o, 1)
life_plot <- list(data=tmp, cluster=life_clust$cluster)
fviz_cluster(life_plot)
life_o <- optics(tmp, eps = 2, minPts=15)
life_clust <- extractDBSCAN(life_o, 1)
life_plot <- list(data=tmp, cluster=life_clust$cluster)
fviz_cluster(life_plot)
life_o <- optics(tmp, eps = 2, minPts=20)
life_clust <- extractDBSCAN(life_o, 1)
life_plot <- list(data=tmp, cluster=life_clust$cluster)
fviz_cluster(life_plot)
tmp <- ds[,1:5]
#za ds eps = 5, minPts=10, drugi eps = 5
life_o <- optics(tmp, eps = 2, minPts=20)
life_clust <- extractDBSCAN(life_o, 1)
life_plot <- list(data=tmp, cluster=life_clust$cluster)
fviz_cluster(life_plot)
life_o <- optics(tmp, eps = 2, minPts=10)
life_clust <- extractDBSCAN(life_o, 1)
life_plot <- list(data=tmp, cluster=life_clust$cluster)
fviz_cluster(life_plot)
life_o <- optics(tmp, eps = 2, minPts=10)
life_clust <- extractDBSCAN(life_o, 2)
life_plot <- list(data=tmp, cluster=life_clust$cluster)
fviz_cluster(life_plot)
life_o <- optics(tmp, eps = 2, minPts=15)
life_clust <- extractDBSCAN(life_o, 2)
life_plot <- list(data=tmp, cluster=life_clust$cluster)
fviz_cluster(life_plot)
tmp <- ds[,3:7]
#za ds eps = 5, minPts=10, drugi eps = 5
life_o <- optics(tmp, eps = 2, minPts=15)
life_clust <- extractDBSCAN(life_o, 2)
life_plot <- list(data=tmp, cluster=life_clust$cluster)
fviz_cluster(life_plot)
tmp <- ds[,1:5]
#za ds eps = 5, minPts=10, drugi eps = 5
life_o <- optics(tmp, eps = 2, minPts=15)
life_clust <- extractDBSCAN(life_o, 2)
life_plot <- list(data=tmp, cluster=life_clust$cluster)
fviz_cluster(life_plot)
str(tmp)
external_validation(ds$Life.expectancy, life_clust$cluster, method="adjusted_rand_index", summary_stats=TRUE)
str(tmp)
str(ds)
life_clust$cluster
sum(life_clust$cluster == 1)
nrow(da)
nrow(ds)
ds[(life_clust$cluster == 1),]
ds[(life_clust$cluster == 1),1]
ds[(life_clust$cluster == 0),1]
summary(tmp)
ds <- read.csv(file.choose())
ds <- na.omit(ds)
ds$Country <- NULL
ds$Status <- NULL
ds$Year <- NULL
ds$Population <- NULL
ds$percentage.expenditure <- NULL
ds$thinness..1.19.years <- NULL
ds$thinness.5.9.years <- NULL
ds$under.five.deaths <- NULL
ds$Measles <- NULL
ds$BMI <- NULL
??normalizeData
install.packages("RSNNS")
library(RSNNS)
normic <- normalizeData(ds, type="norm")
summary(normic)
getNormParameters(normic)
str(ds)
tmp <- ds[,1:5]
#za ds eps = 5, minPts=10, drugi eps = 5
life_o <- optics(tmp, eps = 2, minPts=15)
life_clust <- extractDBSCAN(life_o, 2)
life_plot <- list(data=tmp, cluster=life_clust$cluster)
fviz_cluster(life_plot)
life_o <- optics(tmp, eps = 3, minPts=15)
life_clust <- extractDBSCAN(life_o, 3)
life_plot <- list(data=tmp, cluster=life_clust$cluster)
fviz_cluster(life_plot)
life_o <- optics(tmp, eps = 3, minPts=10)
life_clust <- extractDBSCAN(life_o, 3)
life_plot <- list(data=tmp, cluster=life_clust$cluster)
fviz_cluster(life_plot)
life_o <- optics(tmp, eps = 2.5, minPts=15)
life_clust <- extractDBSCAN(life_o, 2.5)
life_plot <- list(data=tmp, cluster=life_clust$cluster)
fviz_cluster(life_plot)
str(tmp)
tmp[(life_clust$cluster == 0),1]
life_o <- optics(tmp, eps = 1.5, minPts=15)
life_clust <- extractDBSCAN(life_o, 1.5)
life_plot <- list(data=tmp, cluster=life_clust$cluster)
fviz_cluster(life_plot)
life_o <- optics(tmp, eps = 1.5, minPts=15)
life_clust <- extractDBSCAN(life_o, 1)
life_plot <- list(data=tmp, cluster=life_clust$cluster)
fviz_cluster(life_plot)
life_o <- optics(tmp, eps = 15, minPts=15)
life_clust <- extractDBSCAN(life_o, 15)
life_plot <- list(data=tmp, cluster=life_clust$cluster)
fviz_cluster(life_plot)
life_o <- optics(tmp, eps = 10, minPts=10)
life_clust <- extractDBSCAN(life_o, 15)
life_plot <- list(data=tmp, cluster=life_clust$cluster)
fviz_cluster(life_plot)
life_o <- optics(tmp, eps = 10, minPts=10)
life_clust <- extractDBSCAN(life_o, 10)
life_plot <- list(data=tmp, cluster=life_clust$cluster)
fviz_cluster(life_plot)
life_o <- optics(tmp, eps = 10, minPts=20)
life_clust <- extractDBSCAN(life_o, 10)
life_plot <- list(data=tmp, cluster=life_clust$cluster)
fviz_cluster(life_plot)
life_o <- optics(tmp, eps = 10, minPts=50)
life_clust <- extractDBSCAN(life_o, 10)
life_plot <- list(data=tmp, cluster=life_clust$cluster)
fviz_cluster(life_plot)
life_o <- optics(tmp, eps = 20, minPts=20)
life_clust <- extractDBSCAN(life_o, 20)
life_plot <- list(data=tmp, cluster=life_clust$cluster)
fviz_cluster(life_plot)
life_o <- optics(tmp, eps = 30, minPts=20)
life_clust <- extractDBSCAN(life_o, 30)
life_plot <- list(data=tmp, cluster=life_clust$cluster)
fviz_cluster(life_plot)
life_o <- optics(tmp, eps = 30, minPts=30)
life_clust <- extractDBSCAN(life_o, 30)
life_plot <- list(data=tmp, cluster=life_clust$cluster)
fviz_cluster(life_plot)
life_o <- optics(tmp, eps = 30, minPts=20)
life_clust <- extractDBSCAN(life_o, 30)
life_plot <- list(data=tmp, cluster=life_clust$cluster)
fviz_cluster(life_plot)
life_o <- optics(tmp, eps = 30, minPts=10)
life_clust <- extractDBSCAN(life_o, 30)
life_plot <- list(data=tmp, cluster=life_clust$cluster)
fviz_cluster(life_plot)
life_o <- optics(tmp, eps = 30, minPts=40)
life_clust <- extractDBSCAN(life_o, 30)
life_plot <- list(data=tmp, cluster=life_clust$cluster)
fviz_cluster(life_plot)
tmp <- ds[200,1:5]
#za ds eps = 5, minPts=10, drugi eps = 5
life_o <- optics(tmp, eps = 2, minPts=15)
life_clust <- extractDBSCAN(life_o, 2)
life_plot <- list(data=tmp, cluster=life_clust$cluster)
fviz_cluster(life_plot)
tmp <- ds[1:200,1:5]
#za ds eps = 5, minPts=10, drugi eps = 5
life_o <- optics(tmp, eps = 2, minPts=15)
life_clust <- extractDBSCAN(life_o, 2)
life_plot <- list(data=tmp, cluster=life_clust$cluster)
fviz_cluster(life_plot)
tmp <- ds[,1:5]
#za ds eps = 5, minPts=10, drugi eps = 5
life_o <- optics(tmp, eps = 2, minPts=15)
life_clust <- extractDBSCAN(life_o, 2)
life_plot <- list(data=tmp, cluster=life_clust$cluster)
fviz_cluster(life_plot)
tmp <- ds[,1:5]
#za ds eps = 5, minPts=10, drugi eps = 5
life_o <- optics(tmp, eps = 2, minPts=15)
life_clust <- extractDBSCAN(life_o, 2)
life_plot <- list(data=tmp, cluster=life_clust$cluster)
fviz_cluster(life_plot)
life_o <- optics(tmp, eps = 30, minPts=20)
life_clust <- extractDBSCAN(life_o, 30)
life_plot <- list(data=tmp, cluster=life_clust$cluster)
fviz_cluster(life_plot)
tmp[(life_clust$cluster==0),]
external_validation(tmp$Life.expectancy, life_clust$cluster, method="adjusted_rand_index", summary_stats=TRUE)
update <- function(nbrs, pt_id, seeds, visited, rdist, coredist){
#nbrs - data frame with columns id and dist
#pt_id - loop counter
#visited - logical vector
#rdist - vector of reachability distances
#coredist - vector of core distances
while(nrow(nbrs) != 0){
#take last row
id <- nbrs[nrow(nbrs),]$id
dist <- nbrs[nrow(nbrs),]$dist
#remove from nbrs
nbrs <- nbrs[-nrow(nbrs),]
if(nrow(nbrs)!=0) rownames(nbrs) <- c(1:nrow(nbrs)) #restart numbering
if(visited[id]) next
newReachDist <- max(coredist[pt_id], dist)
if(rdist[id] == Inf){
rdist[id] <- newReachDist
seeds[length(seeds)+1] <- id
}
else if(newReachDist < rdist[id]){
rdist[id] <- newReachDist
#no need to add to seeds since the point is already in there
}
}
return(list(nbrs, seeds, rdist, coredist))
}
OPTICS <- function(x, eps, minPts){
visited <- rep(FALSE, nrow(x))
orderedPts <- c()
rdist <- rep(Inf, nrow(x))
coredist <- rep(Inf, nrow(x))
neighbors <- frNN(x, eps) #calculate nearest neighbors
seeds <- c() #empty vector of integers
for(i in 1:nrow(x)){
if(visited[i]) next
#create data frame for ith point's neighbors
pt_neighbors <- data.frame(id=c(neighbors$id[[i]]), dist=c(neighbors$dist[[i]]))
visited[i] = TRUE #mark as processed
#check if current point is a core point
if(nrow(pt_neighbors) >= minPts){
n_dist <- pt_neighbors$dist #dummy vector because we don't want to sort original
n_dist <- sort(n_dist)
coredist[i] <- n_dist[minPts] #update core distance of ith point
}
orderedPts[length(orderedPts)+1] <- i #add id of current point to orderedPts
if(coredist[i] == Inf) next #skip if coredistance is undefined
##call update
u <- update(pt_neighbors, i, seeds, visited, rdist, coredist)
#extract needed data
pt_neighbors <- u[[1]]
seeds <- u[[2]]
rdist <- u[[3]]
coredist <- u[[4]]
#now loop through seeds
while(length(seeds) != 0){
#find the smallest distance to simulate a priority queue
tmp <- seeds[1]
for(p in seeds){
if(rdist[p] < rdist[tmp] || (rdist[p] == rdist[tmp] && tmp < p)) tmp = p
}
j <- tmp #counter j becomes the id of point with minimum distance
seeds <- seeds[which(seeds != j)] #remove j from seeds
#extract q's neighbors from neighbors
q_neighbors <- data.frame(id=c(neighbors$id[[j]]), dist=c(neighbors$dist[[j]]))
visited[j] = TRUE
#update core distance (same as for pt)
if(nrow(q_neighbors) >= minPts){
n_dist <- q_neighbors$dist #dummy vector because we don't want to sort original
n_dist <- sort(n_dist)
coredist[j] <- n_dist[minPts]
}
orderedPts[length(orderedPts)+1] <- j
if(coredist[j] == Inf) next
#call update and extract returned data
u <- update(q_neighbors, j, seeds, visited, rdist, coredist)
q_neighbors <- u[[1]]
seeds <- u[[2]]
rdist <- u[[3]]
coredist <- u[[4]]
}
}
#results
result = data.frame(order=c(orderedPts), reachdist=c(rdist), coredist=c(coredist))
class(result) <- "optics"
return(result)
}
life_o <- OPTICS(tmp, eps = 2, minPts=15)
life_clust <- extractDBSCAN(life_o, 2)
life_plot <- list(data=tmp, cluster=life_clust$cluster)
fviz_cluster(life_plot)
ds <- normalize(ds, range=c(0,1))
tmp <- ds[,1:5]
#za ds eps = 5, minPts=10, drugi eps = 5
#za normalizovane
life_o <- OPTICS(tmp, eps = 2, minPts=15)
life_clust <- extractDBSCAN(life_o, 2)
life_plot <- list(data=tmp, cluster=life_clust$cluster)
fviz_cluster(life_plot)
?NbClust
?external_validation
external_validation(tmp$Life.expectancy, life_clust$cluster, method="adjusted_rand_index", summary_stats=TRUE)
?silhouette
silhouette(tmp)
silhouette(life_clust$cluster, dist(tmp, method="euclidean"))
internal_val <- silhouette(life_clust$cluster, dist(tmp, method="euclidean"))
fviz_silhouette(internal_val)
ds <- read.csv(file.choose())
str(ds)
str(tmp)
colnames(ds)
ds <- na.omit(ds)
ds <- normalize(ds, range=c(0,1))
data <- ds[,c(4, 5, 6, 7, 9)]
#poziv optics (traje oko 1min jer je velik dataset)
life_o <- OPTICS(data, eps = 2, minPts=15)
life_clust <- extractDBSCAN(life_o, 2)
life_plot <- list(data=data, cluster=life_clust$cluster)
fviz_cluster(life_plot)
#hopkins statistika za dataset
hop <- get_clust_tendency(data,n = nrow(data) -1 ,graph = FALSE)
hop$hopkins_stat
seed(123)
set.seed(123)
#hopkins statistika za dataset
?sample
#hopkins statistika za dataset
hop <- get_clust_tendency(data,n = 50 ,graph = FALSE)
hop$hopkins_stat
?ClusterR
??ClusterR
??partitions
?cluster
??cluster
?BBmisc
??BBmisc
library(dbscan) #fNN funckija - fixed nearest neighbors
library(partitions)
library(cluster)
library(factoextra) #fviz
library(BBmisc)
library(ClusterR) #external validation
library(NbClust)
library(stats)
##pomocna funkcija
update <- function(nbrs, pt_id, seeds, visited, rdist, coredist){
#nbrs - data frame sa kolonama id and dist
#pt_id - brojac
#visited - boolean vektor
#rdist - vektor reachability udaljenosti
#coredist - vektor core udaljenosti
while(nrow(nbrs) != 0){
#krenemo od zadnjeg reda
id <- nbrs[nrow(nbrs),]$id
dist <- nbrs[nrow(nbrs),]$dist
#uklanjanje iz nbrs
nbrs <- nbrs[-nrow(nbrs),]
if(nrow(nbrs)!=0) rownames(nbrs) <- c(1:nrow(nbrs)) #restartuje se numerisanje redova
if(visited[id]) next
newReachDist <- max(coredist[pt_id], dist)
if(rdist[id] == Inf){
rdist[id] <- newReachDist
seeds[length(seeds)+1] <- id
}
else if(newReachDist < rdist[id]){
rdist[id] <- newReachDist
}
}
return(list(nbrs, seeds, rdist, coredist))
}
#implementacija optics-a
OPTICS <- function(x, eps, minPts){
visited <- rep(FALSE, nrow(x))
orderedPts <- c()
rdist <- rep(Inf, nrow(x))
coredist <- rep(Inf, nrow(x))
neighbors <- frNN(x, eps) #izracunavanje najblizih susjeda za dist <= eps
seeds <- c() #prazan vektor cijelih brojeva
#inf je koristeno kao UNDEFINED
for(i in 1:nrow(x)){
if(visited[i]) next
#kreira se data frame za komsije i-te instance
pt_neighbors <- data.frame(id=c(neighbors$id[[i]]), dist=c(neighbors$dist[[i]]))
visited[i] = TRUE #i-ta instanca je obradjena
#provjera da li je core point
if(nrow(pt_neighbors) >= minPts){
n_dist <- pt_neighbors$dist #pomocni vektor - ne zelimo sortirati stvarni
n_dist <- sort(n_dist)
coredist[i] <- n_dist[minPts] #updateuje se core distance
}
orderedPts[length(orderedPts)+1] <- i #id trenutne instance se doda u orderedPts
if(coredist[i] == Inf) next #ako je core distance nedefinisan, preskoci
#poziv update
u <- update(pt_neighbors, i, seeds, visited, rdist, coredist)
pt_neighbors <- u[[1]]
seeds <- u[[2]]
rdist <- u[[3]]
coredist <- u[[4]]
#prolazimo kroz seeds
while(length(seeds) != 0){
#trazenje najmanje udaljenosti da se simulira prioritetni red
tmp <- seeds[1]
for(p in seeds){
if(rdist[p] < rdist[tmp] || (rdist[p] == rdist[tmp] && tmp < p)) tmp = p
}
j <- tmp #brojac je je id instance s najmanjom distancom
seeds <- seeds[which(seeds != j)] #uklanjanje j iz seeds
#sada se iz neighbors izvuku komsije od instance j
q_neighbors <- data.frame(id=c(neighbors$id[[j]]), dist=c(neighbors$dist[[j]]))
visited[j] = TRUE
#update core distance (isto kao za pt)
if(nrow(q_neighbors) >= minPts){
n_dist <- q_neighbors$dist
n_dist <- sort(n_dist)
coredist[j] <- n_dist[minPts]
}
orderedPts[length(orderedPts)+1] <- j
if(coredist[j] == Inf) next
#poziva se update
u <- update(q_neighbors, j, seeds, visited, rdist, coredist)
q_neighbors <- u[[1]]
seeds <- u[[2]]
rdist <- u[[3]]
coredist <- u[[4]]
}
}
#results
result = data.frame(order=c(orderedPts), reachdist=c(rdist), coredist=c(coredist))
class(result) <- "optics"
return(result)
}
ds <- read.csv(file.choose())
ds <- na.omit(ds)
ds <- normalize(ds, range=c(0,1))
str(ds)
colnames(ds)
nrow(ds)
hop <- get_clust_tendency(data,n = 50 ,graph = FALSE)
hop$hopkins_stat
#poziv optics (traje oko 1-2 min jer je velik dataset), a kod nije optimizovan
life_o <- OPTICS(data, eps = 2, minPts=15)
life_clust <- extractDBSCAN(life_o, 2)
life_plot <- list(data=data, cluster=life_clust$cluster)
fviz_cluster(life_plot)
?dunn
??dunn
install.packages("clv")
library(clv)
?Dunn
??dunn
install.packages("mlr")
library(mlr)
dunn(dist(data, method="euclidean"), life_clust$cluster)
??dunn
install.packages("clValid")
library(clValid)
clValid::dunn(dist(data, method="euclidean"), life_clust$cluster)
clValid::dunn(life_clust$cluster, Data=data)
clValid::dunn(clusters=life_clust$cluster, Data=data)
str(data)
clValid::dunn(distance = NULL, clusters=life_clust$cluster, Data = data, method = "euclidean")
life_clust$cluster
na.omit(life_clust$cluster)
dunny <- clValid::dunn(distance = NULL, clusters=life_clust$cluster, Data = data, method = "euclidean")
dunny
install.packages("arules")
install.packages("arulesViz")
library(arules)
library(arulesViz)
data(Groceries)
data(Adult)
?Groceries
class(Groceries)
inspect(Groceries)
class(Groceries)
str(Groceries)
Groceris@itemsetInfo
Groceries@itemsetInfo
apriori(Groceries, parameter=list(minlen=1, maxlen=1, support=0.15, target="frequent itemsets"))
inspect(sort(itemsets, by="support"))
itemsets <- apriori(Groceries, parameter=list(minlen=1, maxlen=1, support=0.15, target="frequent itemsets"))
inspect(sort(itemsets, by="support"))
itemsets_2 <- apriori(Groceries, parameter=list(minlen=2, maxlen=2, support=0.03, target="frequent itemsets"))
inspect(itemsets_2)
plot(itemsets_2, method="graph", control=list(type="items"))
?eclat
itemsets_3 <- eclat(Adult, parameter=list(minlen=3, supp=0.7))
inspect(itemsets_3
)
plot(itemsets_3, method="graph", control=list(type="items"))
getwd()
getwd()
setwd("...")
getwd()
setwd("bss-epilepsy-detection")
setwd("Desktop/bss-epilepsy-detection")
setwd("../Desktop/bss-epilepsy-detection")
setwd("~/Desktop/bss-epilepsy-detection")
Desktop\bss-epilepsy-det
setwd("C://Users/USER/Desktop/bss-epilepsy-detection")
getwd()
#ucitavanje dataseta
data_original <- read.csv("EpilepticSeizureRecognitionORIGINAL", header=T)
#izdvojimo 100 od 500 ispitanika
nrow(data_original)
#ucitavanje dataseta
data_original <- read.csv("EpilepticSeizureRecognitionORIGINAL.csv", header=T)
#izdvojimo 100 od 500 ispitanika
nrow(data_original)
#izdvojimo 100 od 500 ispitanika
data_reduced <- data_original[2300, ]
nrow(data_reduced)
#izdvojimo 100 od 500 ispitanika
data_reduced <- data_original[1:2300, ]
nrow(data_reduced)
print(data_reduced)
colnames(data_reduced)
#sredimo nazive kolona radi lakšeg snalaženja
names(data_reduced)[names(data_reduced) == "y"] <- "Klasa"
data_reduced <- data_reduced[,-1]
colnames(data_reduced)
print(data_reduced)
ncol(data_reduced)
write.csv(data_reduced,'EpilepticSeizureRecognitionREDUCED.csv')
